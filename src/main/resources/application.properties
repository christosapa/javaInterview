# ===============================
# = LOGGING
# ===============================
# Log levels severity mapping.
logging.level.org.springframework = info


# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.url = jdbc:sqlserver://localhost:1433;database=userapp
spring.datasource.driver-class-name = com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.properties.hibernate.format_sql = true

# Username and password
spring.datasource.username = sa
spring.datasource.password = passw0rd

# Stop if an error occurs while initializing the database.
spring.datasource.continue-on-error = true

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.tomcat.test-on-borrow = true
spring.datasource.tomcat.time-between-eviction-runs-millis = 60000
spring.datasource.tomcat.validation-query = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties
# (the prefix is stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update, validate): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = create

# Naming strategy
# way too advanced configuration for the purpose of this course
spring.jpa.hibernate.naming.implicit-strategy= org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.hibernate.naming.physical-strategy= org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLServer2012Dialect